# ===============================================================================
# DOCKERFILE OTIMIZADO - ESTRUTURA CORRETA DO REPOSIT√ìRIO
# ===============================================================================
FROM node:18-bullseye-slim

# Metadados
LABEL maintainer="mwfilho"
LABEL description="Microservi√ßo de autentica√ß√£o PJE TJPE"
LABEL version="1.0.0"

# Vari√°veis de ambiente para build
ENV DEBIAN_FRONTEND=noninteractive
ENV NODE_ENV=production
ENV NPM_CONFIG_LOGLEVEL=warn

# Configura√ß√µes Puppeteer
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium
ENV CHROME_PATH=/usr/bin/chromium

# Atualizar sistema e instalar depend√™ncias essenciais
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Instalar Chromium e depend√™ncias do Puppeteer
RUN apt-get update && apt-get install -y \
    chromium \
    fonts-liberation \
    libappindicator3-1 \
    libasound2 \
    libatk-bridge2.0-0 \
    libatk1.0-0 \
    libc6 \
    libcairo2 \
    libcups2 \
    libdbus-1-3 \
    libexpat1 \
    libfontconfig1 \
    libgbm1 \
    libgcc1 \
    libglib2.0-0 \
    libgtk-3-0 \
    libnspr4 \
    libnss3 \
    libpango-1.0-0 \
    libpangocairo-1.0-0 \
    libstdc++6 \
    libx11-6 \
    libx11-xcb1 \
    libxcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    lsb-release \
    xdg-utils \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar usu√°rio n√£o-root para seguran√ßa
RUN groupadd -r nodeuser && useradd -r -g nodeuser -G audio,video nodeuser \
    && mkdir -p /home/nodeuser \
    && chown -R nodeuser:nodeuser /home/nodeuser

# Diret√≥rio de trabalho
WORKDIR /app

# ===============================================================================
# INSTALA√á√ÉO DE DEPEND√äNCIAS (OTIMIZADA PARA CACHE)
# ===============================================================================

# Copiar arquivos de package primeiro (para cache do Docker)
COPY package*.json ./

# Como o package-lock.json J√Å EXISTE, usar npm ci
RUN npm ci --only=production --no-audit --no-fund \
    && npm cache clean --force

# ===============================================================================
# COPIAR C√ìDIGO FONTE
# ===============================================================================

# Copiar TODO o c√≥digo fonte
COPY . .

# ===============================================================================
# VERIFICA√á√ïES DE ESTRUTURA
# ===============================================================================
RUN echo "=========================================" && \
    echo "‚úÖ VERIFICANDO ESTRUTURA DO PROJETO" && \
    echo "=========================================" && \
    echo "üìÅ Conte√∫do da raiz /app:" && \
    ls -la /app && \
    echo "" && \
    echo "üìÑ Verificando arquivos principais:" && \
    test -f /app/app.js && echo "‚úÖ app.js encontrado" || echo "‚ùå app.js N√ÉO encontrado" && \
    test -f /app/package.json && echo "‚úÖ package.json encontrado" || echo "‚ùå package.json N√ÉO encontrado" && \
    test -f /app/package-lock.json && echo "‚úÖ package-lock.json encontrado" || echo "‚ùå package-lock.json N√ÉO encontrado" && \
    echo "" && \
    echo "üìÇ Verificando pastas:" && \
    test -d /app/routes && echo "‚úÖ pasta routes/ encontrada" || echo "‚ùå pasta routes/ N√ÉO encontrada" && \
    test -d /app/services && echo "‚úÖ pasta services/ encontrada" || echo "‚ùå pasta services/ N√ÉO encontrada" && \
    test -d /app/utils && echo "‚úÖ pasta utils/ encontrada" || echo "‚ùå pasta utils/ N√ÉO encontrada" && \
    test -d /app/middleware && echo "‚úÖ pasta middleware/ encontrada" || echo "‚ùå pasta middleware/ N√ÉO encontrada" && \
    echo "" && \
    echo "üìã Verificando arquivos espec√≠ficos:" && \
    test -f /app/routes/webhook.js && echo "‚úÖ routes/webhook.js encontrado" || echo "‚ùå routes/webhook.js N√ÉO encontrado" && \
    test -f /app/services/authService.js && echo "‚úÖ services/authService.js encontrado" || echo "‚ùå services/authService.js N√ÉO encontrado" && \
    test -f /app/services/puppeteerManager.js && echo "‚úÖ services/puppeteerManager.js encontrado" || echo "‚ùå services/puppeteerManager.js N√ÉO encontrado" && \
    test -f /app/utils/logger.js && echo "‚úÖ utils/logger.js encontrado" || echo "‚ùå utils/logger.js N√ÉO encontrado" && \
    echo "========================================="

# ===============================================================================
# CONFIGURA√á√ïES FINAIS
# ===============================================================================

# Definir permiss√µes corretas
RUN chown -R nodeuser:nodeuser /app

# Mudan√ßa para usu√°rio n√£o-root (seguran√ßa)
USER nodeuser

# Configura√ß√µes de runtime
ENV PORT=8080
ENV HOST=0.0.0.0
ENV NODE_OPTIONS="--max-old-space-size=2048"

# Exposi√ß√£o da porta
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# ===============================================================================
# COMANDO DE INICIALIZA√á√ÉO
# ===============================================================================

# O app.js est√° na raiz, usar diretamente
CMD ["node", "app.js"]
